01:
NEXT_REG++;
02:
NEXT_REG--;
03:
NEXT_REG = NEXT_NUM;
04:
NEXT_REG = NEXT_REG;
05:
NEXT_REG += NEXT_NUM;
06:
NEXT_REG += NEXT_REG;
07:
NEXT_REG -= NEXT_NUM;
08:
NEXT_REG -= NEXT_REG;
09:
NEXT_REG *= NEXT_NUM;
10:
NEXT_REG *= NEXT_REG;
11:
NEXT_REG /= NEXT_NUM;
12:
NEXT_REG /= NEXT_REG;
13:
NEXT_REG %= NEXT_NUM;
14:
NEXT_REG %= NEXT_REG;
15:
NEXT_REG &= NEXT_NUM;
16:
NEXT_REG &= NEXT_REG;
17:
NEXT_REG = ~(CURR_REG & NEXT_NUM);
18:
NEXT_REG = ~(CURR_REG & NEXT_REG);
19:
NEXT_REG |= NEXT_NUM;
20:
NEXT_REG |= NEXT_REG;
21:
NEXT_REG = ~(CURR_REG | NEXT_NUM);
22:
NEXT_REG = ~(CURR_REG | NEXT_REG);
23:
NEXT_REG ^= NEXT_NUM;
24:
NEXT_REG ^= NEXT_REG;
25:
NEXT_REG = ~(CURR_REG ^ NEXT_NUM);
26:
NEXT_REG = ~(CURR_REG ^ NEXT_REG);
27:
NEXT_REG = ~CURR_REG;
28:
NEXT_REG <<= NEXT_NUM;
29:
NEXT_REG <<= NEXT_REG;
30:
NEXT_REG >>= NEXT_NUM;
31:
NEXT_REG >>= NEXT_REG;
32:
REG[TMP1] = NEXT_REG >> (8 - NEXT_NUM);
BACK;
CURRENT_REG = (CURRENT_REG << NEXT_NUM) | REG[TMP1];
33:
REG[TMP1] = NEXT_REG >> (8 - NEXT_REG);
BACK;
CURRENT_REG = (CURRENT_REG << NEXT_REG) | REG[TMP1];
34:
REG[TMP1] = NEXT_REG << (8 - NEXT_NUM);
BACK;
CURRENT_REG = (CURRENT_REG >> NEXT_NUM) | REG[TMP1];
35:
REG[TMP1] = NEXT_REG << (8 - NEXT_NUM);
BACK;
CURRENT_REG = (CURRENT_REG >> NEXT_NUM) | REG[TMP1];
36:
STACK_PUSH(NEXT_NUM);
37:
STACK_PUSH(NEXT_REG);
38:
STACK_POP(NULL);
39:
STACK_POP(&NEXT_REG);
40:
STACK_TOP++;
41:
STACK_TOP--;
42:
NEXT_REGISTER = STACK_TOP;
43:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(REG[TMP2] + REG[TMP1]);
44:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(REG[TMP2] - REG[TMP1]);
45:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(REG[TMP2] * REG[TMP1]);
46:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(REG[TMP2] / REG[TMP1]);
47:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(REG[TMP2] % REG[TMP1]);
48:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(REG[TMP2] & REG[TMP1]);
49:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(~(REG[TMP2] & REG[TMP1]));
50:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(REG[TMP2] | REG[TMP1]);
51:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(~(REG[TMP2] | REG[TMP1]));
52:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(REG[TMP2] ^ REG[TMP1]);
53:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(~(REG[TMP2] ^ REG[TMP1]));
54:
STACK_TOP = ~STACK_TOP;
55:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(REG[TMP2] << REG[TMP1]);
56:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH(REG[TMP2] >> REG[TMP1]);
57:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH((REG[TMP2] << REG[TMP1]) | (REG[TMP2] >> (8 - REG[TMP1]));
58:
STACK_POP(&REG[TMP1]);
STACK_POP(&REG[TMP2]);
STACK_PUSH((REG[TMP2] >> REG[TMP1]) | (REG[TMP2] << (8 - REG[TMP1]));
